
PakSafe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000003f0  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800124  00800124  000004a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc2  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000956  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e1  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000025bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055f  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000749  00000000  00000000  00002c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000033e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5b d1       	rcall	.+694    	; 0x37a <main>
  c4:	93 c1       	rjmp	.+806    	; 0x3ec <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	48 17       	cp	r20, r24
  de:	59 07       	cpc	r21, r25
  e0:	29 f4       	brne	.+10     	; 0xec <delay_ms+0x24>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	77 e0       	ldi	r23, 0x07	; 7
  ea:	63 e0       	ldi	r22, 0x03	; 3
  ec:	27 2f       	mov	r18, r23
  ee:	36 2f       	mov	r19, r22
  f0:	ef cf       	rjmp	.-34     	; 0xd0 <delay_ms+0x8>

000000f2 <LCD_WriteCommand>:
  f2:	2e 98       	cbi	0x05, 6	; 5
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	2f 9a       	sbi	0x05, 7	; 5
  f8:	00 00       	nop
  fa:	2f 98       	cbi	0x05, 7	; 5
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	e3 cf       	rjmp	.-58     	; 0xc8 <delay_ms>
 102:	08 95       	ret

00000104 <LCD_ClearScreen>:
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	f5 cf       	rjmp	.-22     	; 0xf2 <LCD_WriteCommand>
 108:	08 95       	ret

0000010a <LCD_Cursor>:
 10a:	81 31       	cpi	r24, 0x11	; 17
 10c:	18 f4       	brcc	.+6      	; 0x114 <LCD_Cursor+0xa>
 10e:	81 58       	subi	r24, 0x81	; 129
 110:	f0 cf       	rjmp	.-32     	; 0xf2 <LCD_WriteCommand>
 112:	08 95       	ret
 114:	81 55       	subi	r24, 0x51	; 81
 116:	ed cf       	rjmp	.-38     	; 0xf2 <LCD_WriteCommand>
 118:	08 95       	ret

0000011a <LCD_init>:
 11a:	84 e6       	ldi	r24, 0x64	; 100
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	d4 df       	rcall	.-88     	; 0xc8 <delay_ms>
 120:	88 e3       	ldi	r24, 0x38	; 56
 122:	e7 df       	rcall	.-50     	; 0xf2 <LCD_WriteCommand>
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	e5 df       	rcall	.-54     	; 0xf2 <LCD_WriteCommand>
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	e3 df       	rcall	.-58     	; 0xf2 <LCD_WriteCommand>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	e1 df       	rcall	.-62     	; 0xf2 <LCD_WriteCommand>
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	c9 cf       	rjmp	.-110    	; 0xc8 <delay_ms>
 136:	08 95       	ret

00000138 <LCD_WriteData>:
 138:	2e 9a       	sbi	0x05, 6	; 5
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	2f 9a       	sbi	0x05, 7	; 5
 13e:	00 00       	nop
 140:	2f 98       	cbi	0x05, 7	; 5
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	c0 cf       	rjmp	.-128    	; 0xc8 <delay_ms>
 148:	08 95       	ret

0000014a <LCD_DisplayString>:
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	18 2f       	mov	r17, r24
 154:	eb 01       	movw	r28, r22
 156:	d6 df       	rcall	.-84     	; 0x104 <LCD_ClearScreen>
 158:	88 81       	ld	r24, Y
 15a:	88 23       	and	r24, r24
 15c:	51 f0       	breq	.+20     	; 0x172 <LCD_DisplayString+0x28>
 15e:	01 e0       	ldi	r16, 0x01	; 1
 160:	01 0f       	add	r16, r17
 162:	81 2f       	mov	r24, r17
 164:	d2 df       	rcall	.-92     	; 0x10a <LCD_Cursor>
 166:	89 91       	ld	r24, Y+
 168:	e7 df       	rcall	.-50     	; 0x138 <LCD_WriteData>
 16a:	10 2f       	mov	r17, r16
 16c:	88 81       	ld	r24, Y
 16e:	81 11       	cpse	r24, r1
 170:	f6 cf       	rjmp	.-20     	; 0x15e <LCD_DisplayString+0x14>
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <TimerOn>:
 17c:	8b e0       	ldi	r24, 0x0B	; 11
 17e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 182:	8d e7       	ldi	r24, 0x7D	; 125
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 18a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 194:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 198:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ac:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 1b0:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 1b4:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 1b8:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
 1bc:	8f b7       	in	r24, 0x3f	; 63
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	8f bf       	out	0x3f, r24	; 63
 1c2:	08 95       	ret

000001c4 <__vector_13>:
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <_avr_timer_cntcurr>
 1da:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <_avr_timer_cntcurr+0x1>
 1de:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <_avr_timer_cntcurr+0x2>
 1e2:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <_avr_timer_cntcurr+0x3>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	a1 09       	sbc	r26, r1
 1ea:	b1 09       	sbc	r27, r1
 1ec:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 1f0:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 1f4:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 1f8:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
 1fc:	89 2b       	or	r24, r25
 1fe:	8a 2b       	or	r24, r26
 200:	8b 2b       	or	r24, r27
 202:	99 f4       	brne	.+38     	; 0x22a <__vector_13+0x66>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <TimerFlag>
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 212:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 216:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 21a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 21e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 222:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 226:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <LCDFSM>:

enum LCDStates { lcdInit, no_package, package } lcdState;
	
void LCDFSM(unsigned char print){
	switch(lcdState) { //Transitions
 23c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <lcdState>
 240:	91 30       	cpi	r25, 0x01	; 1
 242:	41 f0       	breq	.+16     	; 0x254 <LCDFSM+0x18>
 244:	18 f0       	brcs	.+6      	; 0x24c <LCDFSM+0x10>
 246:	92 30       	cpi	r25, 0x02	; 2
 248:	59 f0       	breq	.+22     	; 0x260 <LCDFSM+0x24>
 24a:	10 c0       	rjmp	.+32     	; 0x26c <LCDFSM+0x30>
		case lcdInit: 
			lcdState = no_package;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lcdState>
			break;
 252:	0f c0       	rjmp	.+30     	; 0x272 <LCDFSM+0x36>
			
		case no_package:
			if(print == 1){
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	69 f4       	brne	.+26     	; 0x272 <LCDFSM+0x36>
				lcdState = package;
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lcdState>
 25e:	0f c0       	rjmp	.+30     	; 0x27e <LCDFSM+0x42>
				lcdState = no_package;
			}
			break;
			
		case package:
			if(print == 0){
 260:	81 11       	cpse	r24, r1
 262:	0d c0       	rjmp	.+26     	; 0x27e <LCDFSM+0x42>
				lcdState = no_package;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lcdState>
 26a:	03 c0       	rjmp	.+6      	; 0x272 <LCDFSM+0x36>
				lcdState = package;
			}
			break;
			
		default:
			lcdState = lcdInit;
 26c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <lcdState>
 270:	08 95       	ret
	switch(lcdState) { //State actions
		case lcdInit:
			break;
		
		case no_package:
			LCD_ClearScreen();
 272:	48 df       	rcall	.-368    	; 0x104 <LCD_ClearScreen>
			LCD_DisplayString(1, "PakSafe is empty");
 274:	64 e0       	ldi	r22, 0x04	; 4
 276:	71 e0       	ldi	r23, 0x01	; 1
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	67 cf       	rjmp	.-306    	; 0x14a <LCD_DisplayString>
			break;
 27c:	08 95       	ret
		
		case package:
			LCD_ClearScreen();
 27e:	42 df       	rcall	.-380    	; 0x104 <LCD_ClearScreen>
			LCD_DisplayString(1, "Package inside");
 280:	65 e1       	ldi	r22, 0x15	; 21
 282:	71 e0       	ldi	r23, 0x01	; 1
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	61 cf       	rjmp	.-318    	; 0x14a <LCD_DisplayString>
 288:	08 95       	ret

0000028a <PakSafe>:
unsigned char print = 0x00;

enum PakStates { Init, locked_np, unlocked_rfid, locked_p, unlocked_keypad } State;

void PakSafe(unsigned char RFID, unsigned char IR, unsigned char keypad) {
	switch(State) { // Transitions
 28a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <State>
 28e:	92 30       	cpi	r25, 0x02	; 2
 290:	d9 f0       	breq	.+54     	; 0x2c8 <PakSafe+0x3e>
 292:	28 f4       	brcc	.+10     	; 0x29e <PakSafe+0x14>
 294:	99 23       	and	r25, r25
 296:	41 f0       	breq	.+16     	; 0x2a8 <PakSafe+0x1e>
 298:	91 30       	cpi	r25, 0x01	; 1
 29a:	51 f0       	breq	.+20     	; 0x2b0 <PakSafe+0x26>
 29c:	2d c0       	rjmp	.+90     	; 0x2f8 <PakSafe+0x6e>
 29e:	93 30       	cpi	r25, 0x03	; 3
 2a0:	c9 f0       	breq	.+50     	; 0x2d4 <PakSafe+0x4a>
 2a2:	94 30       	cpi	r25, 0x04	; 4
 2a4:	19 f1       	breq	.+70     	; 0x2ec <PakSafe+0x62>
 2a6:	28 c0       	rjmp	.+80     	; 0x2f8 <PakSafe+0x6e>
		case Init:
			State = locked_np;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <State>
			break;
 2ae:	27 c0       	rjmp	.+78     	; 0x2fe <PakSafe+0x74>

		case locked_np: //no package
			if(RFID == 1){
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	21 f4       	brne	.+8      	; 0x2bc <PakSafe+0x32>
				State = unlocked_rfid;
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <State>
 2ba:	30 c0       	rjmp	.+96     	; 0x31c <PakSafe+0x92>
			}
			else if(keypad == 1){
 2bc:	41 30       	cpi	r20, 0x01	; 1
 2be:	f9 f4       	brne	.+62     	; 0x2fe <PakSafe+0x74>
				State = unlocked_keypad;
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <State>
 2c6:	49 c0       	rjmp	.+146    	; 0x35a <PakSafe+0xd0>
				State = locked_np;
			}
			break;

		case unlocked_rfid:
			if(IR == 1){
 2c8:	61 30       	cpi	r22, 0x01	; 1
 2ca:	41 f5       	brne	.+80     	; 0x31c <PakSafe+0x92>
				State = locked_p;
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <State>
 2d2:	33 c0       	rjmp	.+102    	; 0x33a <PakSafe+0xb0>
				State = unlocked_rfid;
			}
			break;

		case locked_p: //package
			if(RFID == 1){
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <PakSafe+0x56>
				State = unlocked_rfid;
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <State>
 2de:	1e c0       	rjmp	.+60     	; 0x31c <PakSafe+0x92>
			}
			else if(keypad == 1){
 2e0:	41 30       	cpi	r20, 0x01	; 1
 2e2:	59 f5       	brne	.+86     	; 0x33a <PakSafe+0xb0>
				State = unlocked_keypad;
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <State>
 2ea:	37 c0       	rjmp	.+110    	; 0x35a <PakSafe+0xd0>
				State = locked_p;
			}
			break;
		
		case unlocked_keypad:
			if(IR == 1){
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	a9 f5       	brne	.+106    	; 0x35a <PakSafe+0xd0>
				State = locked_np;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <State>
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <PakSafe+0x74>
				State = unlocked_keypad;
			}
			break;
		
		default:
			State = Init;
 2f8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <State>
 2fc:	08 95       	ret
	switch(State) { // State actions
		case Init:
			break;

		case locked_np:
			lock = 0; //closed
 2fe:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <lock>
			print = 0; //"No Package";
 302:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
//--------------------END Timer Code------------------------


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 306:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <tmpB>
 30a:	8c 7f       	andi	r24, 0xFC	; 252

		case locked_np:
			lock = 0; //closed
			print = 0; //"No Package";
			tmpB = SetBit(tmpB, 0, lock);
			tmpB = SetBit(tmpB, 1, print);
 30c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <tmpB>
			LCDFSM(print);
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	94 df       	rcall	.-216    	; 0x23c <LCDFSM>
			PORTB = tmpB;
 314:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <tmpB>
 318:	85 b9       	out	0x05, r24	; 5
			break;
 31a:	08 95       	ret

		case unlocked_rfid:
			lock = 1; //open
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <lock>
			print = 1; //"Package";
 322:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
//--------------------END Timer Code------------------------


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 326:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <tmpB>
 32a:	83 60       	ori	r24, 0x03	; 3

		case unlocked_rfid:
			lock = 1; //open
			print = 1; //"Package";
			tmpB = SetBit(tmpB, 0, lock);
			tmpB = SetBit(tmpB, 1, print);
 32c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <tmpB>
			PORTB = tmpB;
 330:	85 b9       	out	0x05, r24	; 5
			LCDFSM(print);
 332:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 336:	82 cf       	rjmp	.-252    	; 0x23c <LCDFSM>
			break;
 338:	08 95       	ret

		case locked_p:
			lock = 0; //closed
 33a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <lock>
			print = 1; //"Package";
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
//--------------------END Timer Code------------------------


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 344:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <tmpB>
 348:	8e 7f       	andi	r24, 0xFE	; 254
 34a:	82 60       	ori	r24, 0x02	; 2

		case locked_p:
			lock = 0; //closed
			print = 1; //"Package";
			tmpB = SetBit(tmpB, 0, lock);
			tmpB = SetBit(tmpB, 1, print);
 34c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <tmpB>
			PORTB = tmpB;
 350:	85 b9       	out	0x05, r24	; 5
			LCDFSM(print);
 352:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 356:	72 cf       	rjmp	.-284    	; 0x23c <LCDFSM>
			break;
 358:	08 95       	ret

		case unlocked_keypad:
			lock = 1; //open
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <lock>
			print = 0; //"No Package";
 360:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
//--------------------END Timer Code------------------------


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 364:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <tmpB>
 368:	8d 7f       	andi	r24, 0xFD	; 253
 36a:	81 60       	ori	r24, 0x01	; 1

		case unlocked_keypad:
			lock = 1; //open
			print = 0; //"No Package";
			tmpB = SetBit(tmpB, 0, lock);
			tmpB = SetBit(tmpB, 1, print);
 36c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <tmpB>
			PORTB = tmpB;
 370:	85 b9       	out	0x05, r24	; 5
			LCDFSM(print);
 372:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 376:	62 cf       	rjmp	.-316    	; 0x23c <LCDFSM>
 378:	08 95       	ret

0000037a <main>:
}


int main(void){
	//input
	DDRC = 0x00; //sets to 0 for input
 37a:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF; //initializes to all 1s
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	88 b9       	out	0x08, r24	; 8

	//output
	DDRA = 0xFF; //sets to 1 for output
 380:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00; //sets to all 0s
 382:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; //sets to 1 for output
 384:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; //sets to all 0s
 386:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; //sets to 1 for output
 388:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; //sets to all 0s
 38a:	1b b8       	out	0x0b, r1	; 11
	unsigned char RFID = 0x00;
	unsigned char IR = 0x00;
	unsigned char keypad = 0x00;
	
	// Initializes the LCD display
	LCD_init();
 38c:	c6 de       	rcall	.-628    	; 0x11a <LCD_init>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 38e:	8a e0       	ldi	r24, 0x0A	; 10
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	a0 e0       	ldi	r26, 0x00	; 0
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 39a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 39e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3a2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 3a6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 3aa:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 3ae:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 3b2:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
	
	// Initializes the LCD display
	LCD_init();
	
	TimerSet(10);
	TimerOn();
 3b6:	e2 de       	rcall	.-572    	; 0x17c <TimerOn>
	
	State = Init; // Initial state
 3b8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <State>
	lcdState = lcdInit;
 3bc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <lcdState>
	// Replace with your application code
	while (1){
		tmpA = ~PINC;
 3c0:	86 b1       	in	r24, 0x06	; 6
 3c2:	80 95       	com	r24
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
 3c4:	68 2f       	mov	r22, r24
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	ab 01       	movw	r20, r22
 3ca:	55 95       	asr	r21
 3cc:	47 95       	ror	r20
 3ce:	55 95       	asr	r21
 3d0:	47 95       	ror	r20
 3d2:	41 70       	andi	r20, 0x01	; 1
 3d4:	75 95       	asr	r23
 3d6:	67 95       	ror	r22
 3d8:	61 70       	andi	r22, 0x01	; 1
		
		RFID = GetBit(tmpA, 0);
		IR = GetBit(tmpA, 1);
		keypad = GetBit(tmpA, 2);
		
		PakSafe(RFID, IR, keypad);
 3da:	81 70       	andi	r24, 0x01	; 1
 3dc:	56 df       	rcall	.-340    	; 0x28a <PakSafe>
		
		while (!TimerFlag);	// Wait 1 sec
 3de:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <TimerFlag>
 3e2:	88 23       	and	r24, r24
 3e4:	e1 f3       	breq	.-8      	; 0x3de <main+0x64>
		TimerFlag = 0;
 3e6:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <TimerFlag>
	}
 3ea:	ea cf       	rjmp	.-44     	; 0x3c0 <main+0x46>

000003ec <_exit>:
 3ec:	f8 94       	cli

000003ee <__stop_program>:
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <__stop_program>
